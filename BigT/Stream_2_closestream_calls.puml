@startuml

/' diagram meta data start
config=CallConfiguration;
{
  "rootMethod": "BigT.Stream#closestream()",
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showMethodParametersTypes": false,
    "showMethodParametersNames": false,
    "showMethodReturnType": false,
    "showPackageLevels": 2,
    "showCallOrder": false,
    "edgeMode": "MethodsOnly", // TypesOnly, MethodsOnly, TypesAndMethods, MethodsAndDirectTypeUsage
    "showDetailedClassStructure": false
  },
  "rootClass": "BigT.Stream",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="LR"
    splines=polyline
    

'nodes 
subgraph cluster_100346066 { 
   	label=index
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_340125747 { 
   	label=IndexScan
	labeljust=l
	fillcolor=white
	style=filled
   
   IndexScan100346066XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="IndexScan

&#10;	  Cleaning up the index scan, does not remove either the original relation or&#10;	  the index from the database.&#10;	  &#10;	  @exception IndexException error from the lower layer&#10;	  @exception IOExceptionfrom the lower layer&#10;	 "
	fontcolor=darkgreen
];
} 
} 

subgraph cluster_110251553 { 
   	label=tests
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_68952492 { 
   	label=TestRun
	labeljust=l
	fillcolor=white
	style=filled
   
   TestRun110251553XXXmain1859653459[
	label="+ main()"
	style=filled
	fillcolor=white
	tooltip="TestRun

null"
	fontcolor=darkgreen
];

TestRun110251553XXXquery0[
	label="+ query()"
	style=filled
	fillcolor=white
	tooltip="TestRun

null"
	fontcolor=darkgreen
];
} 
} 

subgraph cluster_1182533742 { 
   	label=iterator
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1230883432 { 
   	label=DuplElim
	labeljust=l
	fillcolor=white
	style=filled
   
   DuplElim1182533742XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="DuplElim

&#10;  implement the abstract method close() from super class Iterator&#10; to finish cleaning up&#10; @exception JoinsException join error from lower layers&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_1992159758 { 
   	label=Iterator
	labeljust=l
	fillcolor=white
	style=filled
   
   Iterator1182533742XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="Iterator

&#10; @exception IOException I/O errors&#10; @exception JoinsException some join exception&#10; @exception IndexException exception from Index class&#10; @exception SortException exception Sort class&#10; "
	fontcolor=darkgreen
];

Iterator1182533742XXXfree_buffer_pages1441833903[
	label="+ free_buffer_pages()"
	style=filled
	fillcolor=white
	tooltip="Iterator

&#10; free all the buffer pages we requested earlier.&#10;  should be called in the destructor&#10; @param n_pages the number of pages&#10; @param PageIds the corresponding PageId for each page&#10; @exception IteratorBMException exception from bufmgr class &#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_700392550 { 
   	label=SortMerge
	labeljust=l
	fillcolor=white
	style=filled
   
   SortMerge1182533742XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="SortMerge

 &#10; implement the abstract method close() from super class Iterator&#10; to finish cleaning up&#10; @exception IOException I/O error from lower layers&#10; @exception JoinsException join error from lower layers&#10; @exception IndexException index access error &#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_74054585 { 
   	label=FileScan
	labeljust=l
	fillcolor=white
	style=filled
   
   FileScan1182533742XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="FileScan

&#10; implement the abstract method close() from super class Iterator&#10; to finish cleaning up&#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_869421250 { 
   	label=Sort
	labeljust=l
	fillcolor=white
	style=filled
   
   Sort1182533742XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="Sort

&#10;  Cleaning up, including releasing buffer pages from the buffer pool&#10;  and removing temporary files from the database.&#10;  @exception IOException from lower layers&#10;  @exception SortException something went wrong in the lower layer. &#10; "
	fontcolor=darkgreen
];
} 

subgraph cluster_924017009 { 
   	label=NestedLoopsJoins
	labeljust=l
	fillcolor=white
	style=filled
   
   NestedLoopsJoins1182533742XXXclose0[
	label="+ close()"
	style=filled
	fillcolor=white
	tooltip="NestedLoopsJoins

&#10;  implement the abstract method close() from super class Iterator&#10; to finish cleaning up&#10; @exception IOException I/O error from lower layers&#10; @exception JoinsException join error from lower layers&#10; @exception IndexException index access error &#10; "
	fontcolor=darkgreen
];
} 
} 

subgraph cluster_1378111803 { 
   	label=bufmgr
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_187359758 { 
   	label=BufMgr
	labeljust=l
	fillcolor=white
	style=filled
   
   BufMgr1378111803XXXfreePage1911885782[
	label="+ freePage()"
	style=filled
	fillcolor=white
	tooltip="BufMgr

&#10;	  User should call this method if she needs to delete a page. this routine will&#10;	  call DB to deallocate the page.&#10;	  &#10;	  @param globalPageId the page number in the data base.&#10;	  @exception InvalidBufferException if buffer pool corrupted.&#10;	  @exception ReplacerException if there is a replacer error.&#10;	  @exception HashOperationException if there is a hash table error.&#10;	  @exception InvalidFrameNumberException if there is an invalid frame number.&#10;	  @exception PageNotReadExceptionif a page cannot be read.&#10;	  @exception BufferPoolExceededException if the buffer pool is already full.&#10;	  @exception PagePinnedException if a page is left pinned.&#10;	  @exception PageUnpinnedException if there is a page that is already&#10;	 unpinned.&#10;	  @exception HashEntryNotFoundException if there is no entry of page in the&#10;	 hash table.&#10;	  @exception IOException if there is other kinds of I/O error.&#10;	  @exception BufMgrException other error occured in bufmgr layer&#10;	  @exception DiskMgrExceptionother error occured in diskmgr layer&#10;	 "
	fontcolor=darkgreen
];

BufMgr1378111803XXXpinPage68700167[
	label="+ pinPage()"
	style=filled
	fillcolor=white
	tooltip="BufMgr

&#10;	  Check if this page is in buffer pool, otherwise find a frame for this page,&#10;	  read in and pin it. Also write out the old page if it's dirty before reading&#10;	  if emptyPage==TRUE, then actually no read is done to bring the page in.&#10;	 &#10;	  @param Page_Id_in_a_DB page number in the minibase.&#10;	  @param pagethe pointer poit to the page.&#10;	  @param emptyPage true (empty page); false (non-empty page)&#10;	 &#10;	  @exception ReplacerException if there is a replacer error.&#10;	  @exception HashOperationException if there is a hashtable error.&#10;	  @exception PageUnpinnedException if there is a page that is already&#10;	 unpinned.&#10;	  @exception InvalidFrameNumberException if there is an invalid frame number .&#10;	  @exception PageNotReadExceptionif a page cannot be read.&#10;	  @exception BufferPoolExceededException if the buffer pool is full.&#10;	  @exception PagePinnedException if a page is left pinned .&#10;	  @exception BufMgrException other error occured in bufmgr layer&#10;	  @exception IOException if there is other kinds of I/O error.&#10;	 "
	fontcolor=darkgreen
];

BufMgr1378111803XXXunpinPage118733642[
	label="+ unpinPage()"
	style=filled
	fillcolor=white
	tooltip="BufMgr

&#10;	  To unpin a page specified by a pageId. If pincount\>0, decrement it and if it&#10;	  becomes zero, put it in a group of replacement candidates. if pincount=0&#10;	  before this call, return error.&#10;	 &#10;	  @param globalPageId_in_a_DB page number in the minibase.&#10;	  @param dirtythe dirty bit of the frame&#10;	 &#10;	  @exception ReplacerException if there is a replacer error.&#10;	  @exception PageUnpinnedException if there is a page that is already&#10;	 unpinned.&#10;	  @exception InvalidFrameNumberException if there is an invalid frame number .&#10;	  @exception HashEntryNotFoundException if there is no entry of page in the&#10;	 hash table.&#10;	 "
	fontcolor=darkgreen
];
} 
} 

subgraph cluster_1671616347 { 
   	label=diskmgr
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_533846315 { 
   	label=bigDB
	labeljust=l
	fillcolor=white
	style=filled
   
   bigDB1671616347XXXdelete_file_entry1808118735[
	label="+ delete_file_entry()"
	style=filled
	fillcolor=white
	tooltip="bigDB

&#10;  Delete the entry corresponding to a file from the header page(s).&#10; &#10;  @param fname file entry name&#10; &#10;  @exception FileEntryNotFoundException file does not exist&#10;  @exception FileIOExceptionfile I/O error&#10;  @exception IOExceptionI/O errors&#10;  @exception InvalidPageNumberException invalid page number&#10;  @exception DiskMgrException error caused by other layers&#10; "
	fontcolor=darkgreen
];
} 
} 

subgraph cluster_2070388 { 
   	label=BigT
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1746517850 { 
   	label=Stream
	labeljust=l
	fillcolor=white
	style=filled
   
   Stream2070388XXXclosestream0[
	label="+ closestream()"
	style=filled
	fillcolor=white
	tooltip="Stream

&#10;	  Closes the Scan object&#10;	  &#10;	  @throws IOException&#10;	  @throws SortException&#10;	  @throws IndexException&#10;	 "
	penwidth=4
	fontcolor=darkgreen
];
} 
} 

subgraph cluster_3198444 { 
   	label=heap
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1620025526 { 
   	label=Heapfile
	labeljust=l
	fillcolor=white
	style=filled
   
   Heapfile3198444XXXdeleteFile0[
	label="+ deleteFile()"
	style=filled
	fillcolor=white
	tooltip="Heapfile

&#10;	  Delete the file from the database.&#10;	 &#10;	  @exception InvalidSlotNumberException invalid slot number&#10;	  @exception InvalidInfoSizeException invalid info size&#10;	  @exception FileAlreadyDeletedException file is deleted already&#10;	  @exception HFBufMgrException exception thrown from bufmgr layer&#10;	  @exception HFDiskMgrException exception thrown from diskmgr layer&#10;	  @exception IOException I/O errors&#10;	 "
	fontcolor=darkgreen
];
} 

subgraph cluster_2123351791 { 
   	label=HFPage
	labeljust=l
	fillcolor=white
	style=filled
   
   HFPage3198444XXXfirstRecord0[
	label="+ firstRecord()"
	style=filled
	fillcolor=white
	tooltip="HFPage

&#10;  @return MID of first record on page, null if page contains no records. &#10;  @exception IOException I/O errors&#10;  in C++ Status firstRecord(MID& firstRid)&#10;  &#10; "
	fontcolor=darkgreen
];

HFPage3198444XXXgetRecordInfo76328[
	label="+ getRecordInfo()"
	style=filled
	fillcolor=white
	tooltip="HFPage

null"
	fontcolor=darkgreen
];

HFPage3198444XXXnextRecord76328[
	label="+ nextRecord()"
	style=filled
	fillcolor=white
	tooltip="HFPage

&#10;  @return MID of next record on the page, null if no more &#10;  records exist on the page&#10;  @param 	curRid	current record ID&#10;  @exception IOException I/O errors&#10;  in C++ Status nextRecord (MID curRid, MID& nextRid)&#10; "
	fontcolor=darkgreen
];
} 
} 

'edges    
Heapfile3198444XXXdeleteFile0 -> BufMgr1378111803XXXfreePage1911885782;
Heapfile3198444XXXdeleteFile0 -> BufMgr1378111803XXXpinPage68700167;
Heapfile3198444XXXdeleteFile0 -> BufMgr1378111803XXXunpinPage118733642;
Heapfile3198444XXXdeleteFile0 -> HFPage3198444XXXfirstRecord0;
Heapfile3198444XXXdeleteFile0 -> HFPage3198444XXXgetRecordInfo76328;
Heapfile3198444XXXdeleteFile0 -> HFPage3198444XXXnextRecord76328;
Heapfile3198444XXXdeleteFile0 -> bigDB1671616347XXXdelete_file_entry1808118735;
Iterator1182533742XXXclose0 -> DuplElim1182533742XXXclose0;
Iterator1182533742XXXclose0 -> FileScan1182533742XXXclose0;
Iterator1182533742XXXclose0 -> IndexScan100346066XXXclose0;
Iterator1182533742XXXclose0 -> NestedLoopsJoins1182533742XXXclose0;
Iterator1182533742XXXclose0 -> Sort1182533742XXXclose0;
Iterator1182533742XXXclose0 -> SortMerge1182533742XXXclose0;
Iterator1182533742XXXfree_buffer_pages1441833903 -> BufMgr1378111803XXXfreePage1911885782;
Sort1182533742XXXclose0 -> Heapfile3198444XXXdeleteFile0;
Sort1182533742XXXclose0 -> Iterator1182533742XXXclose0;
Sort1182533742XXXclose0 -> Iterator1182533742XXXfree_buffer_pages1441833903;
Stream2070388XXXclosestream0 -> Sort1182533742XXXclose0;
TestRun110251553XXXmain1859653459 -> TestRun110251553XXXquery0;
TestRun110251553XXXquery0 -> Stream2070388XXXclosestream0;
    
}
@enduml